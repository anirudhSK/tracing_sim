{"message":"cannot infer an appropriate lifetime due to conflicting requirements","code":{"code":"E0495","explanation":"A lifetime cannot be determined in the given situation.\n\nErroneous code example:\n\n```compile_fail,E0495\nfn transmute_lifetime<'a, 'b, T>(t: &'a (T,)) -> &'b T {\n    match (&t,) { // error!\n        ((u,),) => u,\n    }\n}\n\nlet y = Box::new((42,));\nlet x = transmute_lifetime(&y);\n```\n\nIn this code, you have two ways to solve this issue:\n 1. Enforce that `'a` lives at least as long as `'b`.\n 2. Use the same lifetime requirement for both input and output values.\n\nSo for the first solution, you can do it by replacing `'a` with `'a: 'b`:\n\n```\nfn transmute_lifetime<'a: 'b, 'b, T>(t: &'a (T,)) -> &'b T {\n    match (&t,) { // ok!\n        ((u,),) => u,\n    }\n}\n```\n\nIn the second you can do it by simply removing `'b` so they both use `'a`:\n\n```\nfn transmute_lifetime<'a, T>(t: &'a (T,)) -> &'a T {\n    match (&t,) { // ok!\n        ((u,),) => u,\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"graph/serde.rs","byte_start":2527,"byte_end":2538,"line_start":77,"line_end":77,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"                    .add_node(other_data.trace_graph.node_weight(node).unwrap().clone().to_owned());","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"first, the lifetime cannot outlive the lifetime `'b` as defined on the method body at 69:18...","code":null,"level":"note","spans":[{"file_name":"graph/serde.rs","byte_start":2065,"byte_end":2067,"line_start":69,"line_end":69,"column_start":18,"column_end":20,"is_primary":true,"text":[{"text":"    pub fn merge<'b>(&mut self, other_data: FerriedData<'b>) {","highlight_start":18,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"...so that the types are compatible","code":null,"level":"note","spans":[{"file_name":"graph/serde.rs","byte_start":2527,"byte_end":2538,"line_start":77,"line_end":77,"column_start":54,"column_end":65,"is_primary":true,"text":[{"text":"                    .add_node(other_data.trace_graph.node_weight(node).unwrap().clone().to_owned());","highlight_start":54,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"expected `&Graph<(&str, IndexMap<std::string::String, std::string::String>), ()>`\n   found `&Graph<(&'b str, IndexMap<std::string::String, std::string::String>), ()>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"but, the lifetime must be valid for the lifetime `'_` as defined on the impl at 43:22...","code":null,"level":"note","spans":[{"file_name":"graph/serde.rs","byte_start":1139,"byte_end":1141,"line_start":43,"line_end":43,"column_start":22,"column_end":24,"is_primary":true,"text":[{"text":"impl<'a> FerriedData<'_> {","highlight_start":22,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"...so that the expression is assignable","code":null,"level":"note","spans":[{"file_name":"graph/serde.rs","byte_start":2504,"byte_end":2572,"line_start":77,"line_end":77,"column_start":31,"column_end":99,"is_primary":true,"text":[{"text":"                    .add_node(other_data.trace_graph.node_weight(node).unwrap().clone().to_owned());","highlight_start":31,"highlight_end":99}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"expected `(&str, IndexMap<_, _>)`\n   found `(&str, IndexMap<_, _>)`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0495]\u001b[0m\u001b[0m\u001b[1m: cannot infer an appropriate lifetime due to conflicting requirements\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mgraph/serde.rs:77:54\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    .add_node(other_data.trace_graph.node_weight(node).unwrap().clone().to_owned());\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: first, the lifetime cannot outlive the lifetime `'b` as defined on the method body at 69:18...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mgraph/serde.rs:69:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn merge<'b>(&mut self, other_data: FerriedData<'b>) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: ...so that the types are compatible\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mgraph/serde.rs:77:54\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    .add_node(other_data.trace_graph.node_weight(node).unwrap().clone().to_owned());\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected `\u001b[0m\u001b[0m\u001b[1m&Graph<(&str, IndexMap<std::string::String, std::string::String>), ()>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m              found `\u001b[0m\u001b[0m\u001b[1m&Graph<(&'b str, IndexMap<std::string::String, std::string::String>), ()>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: but, the lifetime must be valid for the lifetime `'_` as defined on the impl at 43:22...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mgraph/serde.rs:43:22\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<'a> FerriedData<'_> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: ...so that the expression is assignable\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mgraph/serde.rs:77:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    .add_node(other_data.trace_graph.node_weight(node).unwrap().clone().to_owned());\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected `(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mstr, IndexMap<_, _>)`\u001b[0m\n\u001b[0m              found `(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mstr, IndexMap<_, _>)`\u001b[0m\n\n"}
{"message":"cannot infer an appropriate lifetime due to conflicting requirements","code":{"code":"E0495","explanation":"A lifetime cannot be determined in the given situation.\n\nErroneous code example:\n\n```compile_fail,E0495\nfn transmute_lifetime<'a, 'b, T>(t: &'a (T,)) -> &'b T {\n    match (&t,) { // error!\n        ((u,),) => u,\n    }\n}\n\nlet y = Box::new((42,));\nlet x = transmute_lifetime(&y);\n```\n\nIn this code, you have two ways to solve this issue:\n 1. Enforce that `'a` lives at least as long as `'b`.\n 2. Use the same lifetime requirement for both input and output values.\n\nSo for the first solution, you can do it by replacing `'a` with `'a: 'b`:\n\n```\nfn transmute_lifetime<'a: 'b, 'b, T>(t: &'a (T,)) -> &'b T {\n    match (&t,) { // ok!\n        ((u,),) => u,\n    }\n}\n```\n\nIn the second you can do it by simply removing `'b` so they both use `'a`:\n\n```\nfn transmute_lifetime<'a, T>(t: &'a (T,)) -> &'a T {\n    match (&t,) { // ok!\n        ((u,),) => u,\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"graph/serde.rs","byte_start":3853,"byte_end":3885,"line_start":107,"line_end":107,"column_start":36,"column_end":68,"is_primary":true,"text":[{"text":"        let mut other_properties = other_data.unassigned_properties;","highlight_start":36,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"first, the lifetime cannot outlive the lifetime `'b` as defined on the method body at 69:18...","code":null,"level":"note","spans":[{"file_name":"graph/serde.rs","byte_start":2065,"byte_end":2067,"line_start":69,"line_end":69,"column_start":18,"column_end":20,"is_primary":true,"text":[{"text":"    pub fn merge<'b>(&mut self, other_data: FerriedData<'b>) {","highlight_start":18,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"...so that the expression is assignable","code":null,"level":"note","spans":[{"file_name":"graph/serde.rs","byte_start":3853,"byte_end":3885,"line_start":107,"line_end":107,"column_start":36,"column_end":68,"is_primary":true,"text":[{"text":"        let mut other_properties = other_data.unassigned_properties;","highlight_start":36,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"expected `Vec<Property<'_>>`\n   found `Vec<Property<'b>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"but, the lifetime must be valid for the lifetime `'_` as defined on the impl at 43:22...","code":null,"level":"note","spans":[{"file_name":"graph/serde.rs","byte_start":1139,"byte_end":1141,"line_start":43,"line_end":43,"column_start":22,"column_end":24,"is_primary":true,"text":[{"text":"impl<'a> FerriedData<'_> {","highlight_start":22,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"...so that the expression is assignable","code":null,"level":"note","spans":[{"file_name":"graph/serde.rs","byte_start":3981,"byte_end":4002,"line_start":109,"line_end":109,"column_start":43,"column_end":64,"is_primary":true,"text":[{"text":"        self.unassigned_properties.append(&mut other_properties);","highlight_start":43,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"expected `&mut Vec<Property<'_>>`\n   found `&mut Vec<Property<'_>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0495]\u001b[0m\u001b[0m\u001b[1m: cannot infer an appropriate lifetime due to conflicting requirements\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mgraph/serde.rs:107:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m107\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let mut other_properties = other_data.unassigned_properties;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: first, the lifetime cannot outlive the lifetime `'b` as defined on the method body at 69:18...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mgraph/serde.rs:69:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn merge<'b>(&mut self, other_data: FerriedData<'b>) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: ...so that the expression is assignable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mgraph/serde.rs:107:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m107\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let mut other_properties = other_data.unassigned_properties;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected `Vec<Property<\u001b[0m\u001b[0m\u001b[1m'_\u001b[0m\u001b[0m>>`\u001b[0m\n\u001b[0m               found `Vec<Property<\u001b[0m\u001b[0m\u001b[1m'b\u001b[0m\u001b[0m>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: but, the lifetime must be valid for the lifetime `'_` as defined on the impl at 43:22...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mgraph/serde.rs:43:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl<'a> FerriedData<'_> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: ...so that the expression is assignable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mgraph/serde.rs:109:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        self.unassigned_properties.append(&mut other_properties);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected `\u001b[0m\u001b[0m\u001b[1m&mut Vec<Property<'_>>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found `\u001b[0m\u001b[0m\u001b[1m&mut Vec<Property<'_>>\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0495`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0495`.\u001b[0m\n"}
